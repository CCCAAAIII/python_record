
# python基础<!-- TOC depthFrom:1 depthTo:6 withLinks:1 updateOnSave:1 orderedList:0 -->

- [python基础](#python基础)
	- [1. python中的参数传递](#1-python中的参数传递)
	- [2. 元类](#2-元类)
	- [3. python中的静态方法和类方法和实例方法](#3-python中的静态方法和类方法和实例方法)
	- [4. 类变量和实例变量](#4-类变量和实例变量)
	- [5. python自省](#5-python自省)
	- [6. 字典推导式](#6-字典推导式)

<!-- /TOC -->
## 1. python中的参数传递
变量没有类型，有类型的是对象，
在python中有可变类型和不可变类型，当传递的是不可变类型时，不会对外面的变量产生影响，当传递的是可变类型时

对于不可变对象作为函数参数，相当于C系语言的值传递；
对于可变对象作为函数参数，且参数不指向其他对象时，相当于C系语言的引用传递。
对于可变对象作为函数参数，参数指向其他对象，对参数变量的操作不影响原变量的值
## 2. 元类
元类就是类的类，python中的type可以动态的创建类，元类用于拦截类的创建
## 3. python中的静态方法和类方法和实例方法
1. 静态方法 对参数没有要求 是普通函数，位于类的命名空间，对象和类都可以调用
2. 实例方法 实例方法属于实例，由实例调用,一般第一个参数使用self
3. 类方法 类方法属于类，实例和类都可以调用，一般第一个参数使用cls

## 4. 类变量和实例变量
类变量就是类使用的变量
实例变量就是实例使用的变量
## 5. python自省
自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().
## 6. 字典推导式
推导式是可以从一个数据序列构建另一个新的数据序列的结构体
1. 列表推导式
[表达式 for 变量 in 列表]或者[表达式 for 变量 in 列表 if 条件]
2. 字典推导式
{ key_expr: value_expr for value in collection if condition }
`{key:len(key) for i in range(10) if i>2}`
3. 集合推导式
`{ expr for value in collection if condition }`

## 7. python 中单下划线和双下划线
- `__foo__` python中约定内部的名字
- `_foo` 保护成员
- `__foo`
